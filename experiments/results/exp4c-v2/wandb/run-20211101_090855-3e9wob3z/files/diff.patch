diff --git a/nbs/Exp4(c).ipynb b/nbs/Exp4(c).ipynb
index e7599f1..ca3dd8d 100644
--- a/nbs/Exp4(c).ipynb
+++ b/nbs/Exp4(c).ipynb
@@ -19,17 +19,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
     "import pandas as pd\n",
-    "df = pd.read_csv(\"bank-additional-full.csv\", delimiter=';')"
+    "df = pd.read_csv(\"../data/bank-additional-full.csv\", delimiter=';')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -39,7 +39,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -48,7 +48,7 @@
        "(41188, 21)"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -59,7 +59,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
@@ -68,7 +68,7 @@
        "28831.6"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -79,7 +79,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -89,7 +89,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -102,7 +102,7 @@
        "      dtype='object')"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -113,7 +113,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -127,7 +127,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 10,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -138,12 +138,75 @@
     "                   y_names=target,\n",
     "                   splits=splitsA)\n",
     "dlsA = toA.dataloaders(bs=512)\n",
-    "learnA = tabular_learner(dlsA, metrics=accuracy)"
+    "rocaucbin = RocAucBinary()\n",
+    "learnA = tabular_learner(dlsA, metrics=[rocaucbin, accuracy])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mmanikya\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.12.6 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Tracking run with wandb version 0.10.32<br/>\n",
+       "                Syncing run <strong style=\"color:#cdcd00\">modelA training</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://wandb.ai/transfertab/Experiments\" target=\"_blank\">https://wandb.ai/transfertab/Experiments</a><br/>\n",
+       "                Run page: <a href=\"https://wandb.ai/transfertab/Experiments/runs/1siad487\" target=\"_blank\">https://wandb.ai/transfertab/Experiments/runs/1siad487</a><br/>\n",
+       "                Run data is saved locally in <code>/Users/manikyabardhan/Documents/github/transfertab/results/exp4c-v2/wandb/run-20211101_083800-1siad487</code><br/><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<h1>Run(1siad487)</h1><iframe src=\"https://wandb.ai/transfertab/Experiments/runs/1siad487\" style=\"border:none;width:100%;height:400px\"></iframe>"
+      ],
+      "text/plain": [
+       "<wandb.sdk.wandb_run.Run at 0x7ff9f7d7b700>"
+      ]
+     },
+     "execution_count": 11,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "wandb.init(\n",
+    "    project='Experiments', \n",
+    "    save_code=True, \n",
+    "    group='Exp4c v2', \n",
+    "    job_type='pretrain', \n",
+    "    tags=['base', 'bank', 'modelA'], \n",
+    "    name='modelA training',\n",
+    "    notes=\"Training modelA from which we'll take embeddings\",\n",
+    "    reinit=True,\n",
+    "    dir='/Users/manikyabardhan/Documents/github/transfertab/results/exp4c-v2',\n",
+    "    entity='transfertab'\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
    "metadata": {},
    "outputs": [
     {
@@ -155,6 +218,7 @@
        "      <th>epoch</th>\n",
        "      <th>train_loss</th>\n",
        "      <th>valid_loss</th>\n",
+       "      <th>roc_auc_score</th>\n",
        "      <th>accuracy</th>\n",
        "      <th>time</th>\n",
        "    </tr>\n",
@@ -162,353 +226,403 @@
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>0</td>\n",
-       "      <td>0.749303</td>\n",
-       "      <td>0.649875</td>\n",
-       "      <td>0.763094</td>\n",
+       "      <td>0.742446</td>\n",
+       "      <td>0.676085</td>\n",
+       "      <td>0.901483</td>\n",
+       "      <td>0.733611</td>\n",
        "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>1</td>\n",
-       "      <td>0.718157</td>\n",
-       "      <td>0.684830</td>\n",
-       "      <td>0.789109</td>\n",
+       "      <td>0.721670</td>\n",
+       "      <td>0.685274</td>\n",
+       "      <td>0.940751</td>\n",
+       "      <td>0.802116</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>2</td>\n",
-       "      <td>0.692475</td>\n",
-       "      <td>0.654220</td>\n",
-       "      <td>0.857614</td>\n",
+       "      <td>0.700482</td>\n",
+       "      <td>0.660726</td>\n",
+       "      <td>0.936917</td>\n",
+       "      <td>0.869754</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>3</td>\n",
-       "      <td>0.661029</td>\n",
-       "      <td>0.621325</td>\n",
-       "      <td>0.871315</td>\n",
+       "      <td>0.671983</td>\n",
+       "      <td>0.615222</td>\n",
+       "      <td>0.950835</td>\n",
+       "      <td>0.888831</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>4</td>\n",
-       "      <td>0.612372</td>\n",
-       "      <td>0.545851</td>\n",
-       "      <td>0.903746</td>\n",
+       "      <td>0.625605</td>\n",
+       "      <td>0.543329</td>\n",
+       "      <td>0.952714</td>\n",
+       "      <td>0.899063</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>5</td>\n",
-       "      <td>0.530301</td>\n",
-       "      <td>0.415358</td>\n",
-       "      <td>0.939473</td>\n",
+       "      <td>0.546002</td>\n",
+       "      <td>0.425536</td>\n",
+       "      <td>0.925603</td>\n",
+       "      <td>0.936178</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>6</td>\n",
-       "      <td>0.413513</td>\n",
-       "      <td>0.269495</td>\n",
-       "      <td>0.944676</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.422753</td>\n",
+       "      <td>0.281234</td>\n",
+       "      <td>0.918322</td>\n",
+       "      <td>0.945023</td>\n",
+       "      <td>00:10</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>7</td>\n",
-       "      <td>0.294984</td>\n",
-       "      <td>0.184901</td>\n",
-       "      <td>0.953174</td>\n",
+       "      <td>0.302040</td>\n",
+       "      <td>0.196519</td>\n",
+       "      <td>0.888314</td>\n",
+       "      <td>0.947451</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>8</td>\n",
-       "      <td>0.213285</td>\n",
-       "      <td>0.155507</td>\n",
-       "      <td>0.945890</td>\n",
+       "      <td>0.214999</td>\n",
+       "      <td>0.146657</td>\n",
+       "      <td>0.934127</td>\n",
+       "      <td>0.947797</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>9</td>\n",
-       "      <td>0.166619</td>\n",
-       "      <td>0.147200</td>\n",
-       "      <td>0.942768</td>\n",
+       "      <td>0.166288</td>\n",
+       "      <td>0.127942</td>\n",
+       "      <td>0.949302</td>\n",
+       "      <td>0.947971</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>10</td>\n",
-       "      <td>0.141522</td>\n",
-       "      <td>0.124731</td>\n",
-       "      <td>0.949185</td>\n",
+       "      <td>0.139979</td>\n",
+       "      <td>0.138055</td>\n",
+       "      <td>0.914386</td>\n",
+       "      <td>0.947971</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>11</td>\n",
-       "      <td>0.128892</td>\n",
-       "      <td>0.122597</td>\n",
-       "      <td>0.946757</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.127579</td>\n",
+       "      <td>0.123222</td>\n",
+       "      <td>0.948124</td>\n",
+       "      <td>0.946410</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>12</td>\n",
-       "      <td>0.120098</td>\n",
-       "      <td>0.118234</td>\n",
-       "      <td>0.952653</td>\n",
+       "      <td>0.118868</td>\n",
+       "      <td>0.126295</td>\n",
+       "      <td>0.946335</td>\n",
+       "      <td>0.946583</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>13</td>\n",
-       "      <td>0.114814</td>\n",
-       "      <td>0.122743</td>\n",
-       "      <td>0.947797</td>\n",
+       "      <td>0.115920</td>\n",
+       "      <td>0.123844</td>\n",
+       "      <td>0.952062</td>\n",
+       "      <td>0.946410</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>14</td>\n",
-       "      <td>0.111385</td>\n",
-       "      <td>0.115154</td>\n",
-       "      <td>0.951266</td>\n",
+       "      <td>0.112042</td>\n",
+       "      <td>0.119435</td>\n",
+       "      <td>0.950642</td>\n",
+       "      <td>0.948144</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>15</td>\n",
-       "      <td>0.111779</td>\n",
-       "      <td>0.114783</td>\n",
-       "      <td>0.950225</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.109102</td>\n",
+       "      <td>0.124263</td>\n",
+       "      <td>0.950407</td>\n",
+       "      <td>0.945023</td>\n",
+       "      <td>00:07</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>16</td>\n",
-       "      <td>0.108324</td>\n",
-       "      <td>0.124333</td>\n",
-       "      <td>0.951786</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.107584</td>\n",
+       "      <td>0.124478</td>\n",
+       "      <td>0.934363</td>\n",
+       "      <td>0.949879</td>\n",
+       "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>17</td>\n",
-       "      <td>0.107939</td>\n",
-       "      <td>0.114497</td>\n",
-       "      <td>0.950572</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.106787</td>\n",
+       "      <td>0.123867</td>\n",
+       "      <td>0.948302</td>\n",
+       "      <td>0.945890</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>18</td>\n",
-       "      <td>0.105842</td>\n",
-       "      <td>0.112679</td>\n",
-       "      <td>0.954388</td>\n",
-       "      <td>00:05</td>\n",
+       "      <td>0.104831</td>\n",
+       "      <td>0.120430</td>\n",
+       "      <td>0.951225</td>\n",
+       "      <td>0.947104</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>19</td>\n",
-       "      <td>0.102464</td>\n",
-       "      <td>0.114770</td>\n",
-       "      <td>0.948838</td>\n",
+       "      <td>0.103177</td>\n",
+       "      <td>0.120644</td>\n",
+       "      <td>0.950658</td>\n",
+       "      <td>0.947104</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>20</td>\n",
-       "      <td>0.102479</td>\n",
-       "      <td>0.124480</td>\n",
-       "      <td>0.944329</td>\n",
+       "      <td>0.100989</td>\n",
+       "      <td>0.121526</td>\n",
+       "      <td>0.952069</td>\n",
+       "      <td>0.947797</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>21</td>\n",
-       "      <td>0.101976</td>\n",
-       "      <td>0.113341</td>\n",
-       "      <td>0.950572</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.101278</td>\n",
+       "      <td>0.120946</td>\n",
+       "      <td>0.952153</td>\n",
+       "      <td>0.946410</td>\n",
+       "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>22</td>\n",
-       "      <td>0.099809</td>\n",
-       "      <td>0.114025</td>\n",
-       "      <td>0.948144</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.100383</td>\n",
+       "      <td>0.119791</td>\n",
+       "      <td>0.952221</td>\n",
+       "      <td>0.945023</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>23</td>\n",
-       "      <td>0.099724</td>\n",
-       "      <td>0.121273</td>\n",
-       "      <td>0.947624</td>\n",
+       "      <td>0.098665</td>\n",
+       "      <td>0.127096</td>\n",
+       "      <td>0.948546</td>\n",
+       "      <td>0.943115</td>\n",
        "      <td>00:05</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>24</td>\n",
-       "      <td>0.098597</td>\n",
-       "      <td>0.115251</td>\n",
-       "      <td>0.949879</td>\n",
-       "      <td>00:05</td>\n",
+       "      <td>0.097735</td>\n",
+       "      <td>0.125222</td>\n",
+       "      <td>0.946060</td>\n",
+       "      <td>0.948838</td>\n",
+       "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>25</td>\n",
-       "      <td>0.097268</td>\n",
-       "      <td>0.118731</td>\n",
-       "      <td>0.944849</td>\n",
+       "      <td>0.096316</td>\n",
+       "      <td>0.123181</td>\n",
+       "      <td>0.951687</td>\n",
+       "      <td>0.946237</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>26</td>\n",
-       "      <td>0.095829</td>\n",
-       "      <td>0.115658</td>\n",
-       "      <td>0.950225</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.094602</td>\n",
+       "      <td>0.122731</td>\n",
+       "      <td>0.949897</td>\n",
+       "      <td>0.946757</td>\n",
+       "      <td>00:07</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>27</td>\n",
-       "      <td>0.093311</td>\n",
-       "      <td>0.118414</td>\n",
-       "      <td>0.949358</td>\n",
+       "      <td>0.092834</td>\n",
+       "      <td>0.121625</td>\n",
+       "      <td>0.952283</td>\n",
+       "      <td>0.948318</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>28</td>\n",
-       "      <td>0.092198</td>\n",
-       "      <td>0.116839</td>\n",
-       "      <td>0.949532</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.091539</td>\n",
+       "      <td>0.121895</td>\n",
+       "      <td>0.952110</td>\n",
+       "      <td>0.948318</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>29</td>\n",
-       "      <td>0.090561</td>\n",
-       "      <td>0.118077</td>\n",
-       "      <td>0.950052</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.090237</td>\n",
+       "      <td>0.122350</td>\n",
+       "      <td>0.951001</td>\n",
+       "      <td>0.945196</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>30</td>\n",
-       "      <td>0.091132</td>\n",
-       "      <td>0.118099</td>\n",
-       "      <td>0.949358</td>\n",
-       "      <td>00:01</td>\n",
+       "      <td>0.089704</td>\n",
+       "      <td>0.123925</td>\n",
+       "      <td>0.951392</td>\n",
+       "      <td>0.946757</td>\n",
+       "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>31</td>\n",
-       "      <td>0.089039</td>\n",
-       "      <td>0.116878</td>\n",
-       "      <td>0.948838</td>\n",
+       "      <td>0.088133</td>\n",
+       "      <td>0.124658</td>\n",
+       "      <td>0.949165</td>\n",
+       "      <td>0.943115</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>32</td>\n",
-       "      <td>0.087824</td>\n",
-       "      <td>0.116488</td>\n",
-       "      <td>0.948838</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.087513</td>\n",
+       "      <td>0.123645</td>\n",
+       "      <td>0.950480</td>\n",
+       "      <td>0.945369</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>33</td>\n",
-       "      <td>0.086161</td>\n",
-       "      <td>0.120567</td>\n",
-       "      <td>0.949185</td>\n",
-       "      <td>00:07</td>\n",
+       "      <td>0.086274</td>\n",
+       "      <td>0.123924</td>\n",
+       "      <td>0.950286</td>\n",
+       "      <td>0.946237</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>34</td>\n",
-       "      <td>0.086372</td>\n",
-       "      <td>0.119583</td>\n",
-       "      <td>0.944849</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.085311</td>\n",
+       "      <td>0.123360</td>\n",
+       "      <td>0.950858</td>\n",
+       "      <td>0.947797</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>35</td>\n",
-       "      <td>0.085500</td>\n",
-       "      <td>0.121392</td>\n",
-       "      <td>0.947104</td>\n",
-       "      <td>00:01</td>\n",
+       "      <td>0.084526</td>\n",
+       "      <td>0.125127</td>\n",
+       "      <td>0.949607</td>\n",
+       "      <td>0.946930</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>36</td>\n",
-       "      <td>0.084033</td>\n",
-       "      <td>0.121794</td>\n",
-       "      <td>0.947104</td>\n",
-       "      <td>00:01</td>\n",
+       "      <td>0.084070</td>\n",
+       "      <td>0.126798</td>\n",
+       "      <td>0.948000</td>\n",
+       "      <td>0.944676</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>37</td>\n",
-       "      <td>0.082252</td>\n",
-       "      <td>0.120998</td>\n",
-       "      <td>0.947451</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.082427</td>\n",
+       "      <td>0.125071</td>\n",
+       "      <td>0.948889</td>\n",
+       "      <td>0.945890</td>\n",
+       "      <td>00:07</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>38</td>\n",
-       "      <td>0.080516</td>\n",
-       "      <td>0.120518</td>\n",
-       "      <td>0.950052</td>\n",
+       "      <td>0.080851</td>\n",
+       "      <td>0.126445</td>\n",
+       "      <td>0.948666</td>\n",
+       "      <td>0.946583</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>39</td>\n",
-       "      <td>0.079751</td>\n",
-       "      <td>0.120351</td>\n",
-       "      <td>0.947451</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.080003</td>\n",
+       "      <td>0.125524</td>\n",
+       "      <td>0.950239</td>\n",
+       "      <td>0.948491</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>40</td>\n",
-       "      <td>0.079378</td>\n",
-       "      <td>0.121048</td>\n",
-       "      <td>0.949705</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.079424</td>\n",
+       "      <td>0.126035</td>\n",
+       "      <td>0.949245</td>\n",
+       "      <td>0.946237</td>\n",
+       "      <td>00:08</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>41</td>\n",
-       "      <td>0.078272</td>\n",
-       "      <td>0.120429</td>\n",
-       "      <td>0.948838</td>\n",
+       "      <td>0.078750</td>\n",
+       "      <td>0.126719</td>\n",
+       "      <td>0.949070</td>\n",
+       "      <td>0.945196</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>42</td>\n",
-       "      <td>0.077412</td>\n",
-       "      <td>0.120887</td>\n",
-       "      <td>0.947797</td>\n",
-       "      <td>00:01</td>\n",
+       "      <td>0.077940</td>\n",
+       "      <td>0.126753</td>\n",
+       "      <td>0.948758</td>\n",
+       "      <td>0.946237</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>43</td>\n",
-       "      <td>0.077169</td>\n",
-       "      <td>0.121356</td>\n",
-       "      <td>0.949185</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.077487</td>\n",
+       "      <td>0.126400</td>\n",
+       "      <td>0.949084</td>\n",
+       "      <td>0.945716</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>44</td>\n",
-       "      <td>0.076598</td>\n",
-       "      <td>0.121034</td>\n",
-       "      <td>0.949185</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.077226</td>\n",
+       "      <td>0.127044</td>\n",
+       "      <td>0.949308</td>\n",
+       "      <td>0.945196</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>45</td>\n",
-       "      <td>0.076073</td>\n",
-       "      <td>0.121443</td>\n",
-       "      <td>0.948144</td>\n",
-       "      <td>00:02</td>\n",
+       "      <td>0.077405</td>\n",
+       "      <td>0.126853</td>\n",
+       "      <td>0.949015</td>\n",
+       "      <td>0.945196</td>\n",
+       "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>46</td>\n",
-       "      <td>0.075420</td>\n",
-       "      <td>0.121875</td>\n",
-       "      <td>0.948491</td>\n",
+       "      <td>0.076498</td>\n",
+       "      <td>0.126920</td>\n",
+       "      <td>0.949112</td>\n",
+       "      <td>0.945716</td>\n",
        "      <td>00:06</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>47</td>\n",
-       "      <td>0.075300</td>\n",
-       "      <td>0.121487</td>\n",
-       "      <td>0.947971</td>\n",
-       "      <td>00:06</td>\n",
+       "      <td>0.076196</td>\n",
+       "      <td>0.127092</td>\n",
+       "      <td>0.948731</td>\n",
+       "      <td>0.945369</td>\n",
+       "      <td>00:01</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>48</td>\n",
-       "      <td>0.075302</td>\n",
-       "      <td>0.121645</td>\n",
-       "      <td>0.947797</td>\n",
+       "      <td>0.075681</td>\n",
+       "      <td>0.126865</td>\n",
+       "      <td>0.948923</td>\n",
+       "      <td>0.945890</td>\n",
        "      <td>00:02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>49</td>\n",
-       "      <td>0.075431</td>\n",
-       "      <td>0.121659</td>\n",
-       "      <td>0.947797</td>\n",
-       "      <td>00:01</td>\n",
+       "      <td>0.075679</td>\n",
+       "      <td>0.126972</td>\n",
+       "      <td>0.948815</td>\n",
+       "      <td>0.945369</td>\n",
+       "      <td>00:04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>"
@@ -524,21 +638,17 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Better model found at epoch 0 with valid_loss value: 0.6498745679855347.\n",
-      "Better model found at epoch 3 with valid_loss value: 0.6213252544403076.\n",
-      "Better model found at epoch 4 with valid_loss value: 0.5458512306213379.\n",
-      "Better model found at epoch 5 with valid_loss value: 0.415358304977417.\n",
-      "Better model found at epoch 6 with valid_loss value: 0.269494891166687.\n",
-      "Better model found at epoch 7 with valid_loss value: 0.1849014014005661.\n",
-      "Better model found at epoch 8 with valid_loss value: 0.15550671517848969.\n",
-      "Better model found at epoch 9 with valid_loss value: 0.1471996009349823.\n",
-      "Better model found at epoch 10 with valid_loss value: 0.12473147362470627.\n",
-      "Better model found at epoch 11 with valid_loss value: 0.12259650230407715.\n",
-      "Better model found at epoch 12 with valid_loss value: 0.11823393404483795.\n",
-      "Better model found at epoch 14 with valid_loss value: 0.11515449732542038.\n",
-      "Better model found at epoch 15 with valid_loss value: 0.1147831529378891.\n",
-      "Better model found at epoch 17 with valid_loss value: 0.11449667811393738.\n",
-      "Better model found at epoch 18 with valid_loss value: 0.11267862468957901.\n"
+      "Better model found at epoch 0 with valid_loss value: 0.6760854125022888.\n",
+      "Better model found at epoch 2 with valid_loss value: 0.6607264280319214.\n",
+      "Better model found at epoch 3 with valid_loss value: 0.6152218580245972.\n",
+      "Better model found at epoch 4 with valid_loss value: 0.5433291792869568.\n",
+      "Better model found at epoch 5 with valid_loss value: 0.42553603649139404.\n",
+      "Better model found at epoch 6 with valid_loss value: 0.2812340259552002.\n",
+      "Better model found at epoch 7 with valid_loss value: 0.19651906192302704.\n",
+      "Better model found at epoch 8 with valid_loss value: 0.14665652811527252.\n",
+      "Better model found at epoch 9 with valid_loss value: 0.1279415786266327.\n",
+      "Better model found at epoch 11 with valid_loss value: 0.12322241067886353.\n",
+      "Better model found at epoch 14 with valid_loss value: 0.1194349154829979.\n"
      ]
     }
    ],
@@ -549,72 +659,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mmanikya\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.12.5 is available!  To upgrade, please run:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n"
-     ]
-    },
     {
      "data": {
-      "text/html": [
-       "\n",
-       "                Tracking run with wandb version 0.10.32<br/>\n",
-       "                Syncing run <strong style=\"color:#cdcd00\">modelA training</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://wandb.ai/manikya/transfertab\" target=\"_blank\">https://wandb.ai/manikya/transfertab</a><br/>\n",
-       "                Run page: <a href=\"https://wandb.ai/manikya/transfertab/runs/2679zttn\" target=\"_blank\">https://wandb.ai/manikya/transfertab/runs/2679zttn</a><br/>\n",
-       "                Run data is saved locally in <code>/Users/manikyabardhan/Downloads/bank-additional/wandb/run-20211020_181232-2679zttn</code><br/><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "<h1>Run(2679zttn)</h1><iframe src=\"https://wandb.ai/manikya/transfertab/runs/2679zttn\" style=\"border:none;width:100%;height:400px\"></iframe>"
-      ],
-      "text/plain": [
-       "<wandb.sdk.wandb_run.Run at 0x7fe6ab518c40>"
-      ]
-     },
-     "execution_count": 21,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "wandb.init(\n",
-    "    project='transfertab', \n",
-    "    save_code=True, \n",
-    "    group='Exp4c', \n",
-    "    job_type='basetrain', \n",
-    "    tags=['base', 'bank'], \n",
-    "    name='modelA training',\n",
-    "    notes=\"Training modelA from which we'll take embeddings\",\n",
-    "    reinit=True\n",
-    ")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 26,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -631,40 +681,40 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [],
    "source": [
-    "torch.save(learnA.model.state_dict(),\"modelA_state_dict\")"
+    "torch.save(learnA.model.state_dict(),\"../results/exp4c-v2/modelA_state_dict\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 28,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [],
    "source": [
-    "catdict = {col:list(learnA.dls.categorify.classes[col]) for col in catcols}"
+    "catdictA = {col:list(learnA.dls.categorify.classes[col]) for col in catcols}"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
+   "execution_count": 18,
    "metadata": {},
    "outputs": [],
    "source": [
-    "embeds = extractembeds(learnA.model, catdict, transfercats=catcols, allcats=catcols, path=\"learnA_extracts\", kind=\"json\")"
+    "embeds = extractembeds(learnA.model, catdictA, transfercats=catcols, allcats=catcols, path=\"learnA_extracts\", kind=\"json\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 30,
+   "execution_count": 19,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
-       "<br/>Waiting for W&B process to finish, PID 40947<br/>Program ended successfully."
+       "<br/>Waiting for W&B process to finish, PID 45710<br/>Program ended successfully."
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -676,12 +726,12 @@
     {
      "data": {
       "application/vnd.jupyter.widget-view+json": {
-       "model_id": "fa3f8297b27348739c3bc29d5b59faab",
+       "model_id": "adde801e102a4026934c81ea72c44134",
        "version_major": 2,
        "version_minor": 0
       },
       "text/plain": [
-       "VBox(children=(Label(value=' 2.51MB of 2.51MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
+       "VBox(children=(Label(value=' 2.40MB of 2.40MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
       ]
      },
      "metadata": {},
@@ -690,7 +740,7 @@
     {
      "data": {
       "text/html": [
-       "Find user logs for this run at: <code>/Users/manikyabardhan/Downloads/bank-additional/wandb/run-20211020_181232-2679zttn/logs/debug.log</code>"
+       "Find user logs for this run at: <code>/Users/manikyabardhan/Documents/github/transfertab/results/exp4c-v2/wandb/run-20211101_083800-1siad487/logs/debug.log</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -702,7 +752,7 @@
     {
      "data": {
       "text/html": [
-       "Find internal logs for this run at: <code>/Users/manikyabardhan/Downloads/bank-additional/wandb/run-20211020_181232-2679zttn/logs/debug-internal.log</code>"
+       "Find internal logs for this run at: <code>/Users/manikyabardhan/Documents/github/transfertab/results/exp4c-v2/wandb/run-20211101_083800-1siad487/logs/debug-internal.log</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -717,7 +767,7 @@
        "<h3>Run summary:</h3><br/><style>\n",
        "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
        "    </style><table class=\"wandb\">\n",
-       "<tr><td>epoch</td><td>50</td></tr><tr><td>train_loss</td><td>0.07543</td></tr><tr><td>raw_loss</td><td>0.09526</td></tr><tr><td>wd_0</td><td>0.01</td></tr><tr><td>sqr_mom_0</td><td>0.99</td></tr><tr><td>lr_0</td><td>0.0</td></tr><tr><td>mom_0</td><td>0.95</td></tr><tr><td>eps_0</td><td>1e-05</td></tr><tr><td>_runtime</td><td>358</td></tr><tr><td>_timestamp</td><td>1634734110</td></tr><tr><td>_step</td><td>2249</td></tr><tr><td>valid_loss</td><td>0.12166</td></tr><tr><td>accuracy</td><td>0.9478</td></tr></table>"
+       "<tr><td>epoch</td><td>50</td></tr><tr><td>train_loss</td><td>0.07568</td></tr><tr><td>raw_loss</td><td>0.07273</td></tr><tr><td>wd_0</td><td>0.01</td></tr><tr><td>sqr_mom_0</td><td>0.99</td></tr><tr><td>lr_0</td><td>0.0</td></tr><tr><td>mom_0</td><td>0.95</td></tr><tr><td>eps_0</td><td>1e-05</td></tr><tr><td>_runtime</td><td>366</td></tr><tr><td>_timestamp</td><td>1635736447</td></tr><tr><td>_step</td><td>2249</td></tr><tr><td>valid_loss</td><td>0.12697</td></tr><tr><td>roc_auc_score</td><td>0.94882</td></tr><tr><td>accuracy</td><td>0.94537</td></tr></table>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -732,7 +782,7 @@
        "<h3>Run history:</h3><br/><style>\n",
        "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
        "    </style><table class=\"wandb\">\n",
-       "<tr><td>epoch</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>train_loss</td><td>██▇▇▆▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>raw_loss</td><td>█▇█▇▅▄▂▂▂▂▂▂▁▁▂▁▁▁▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>wd_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>sqr_mom_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>lr_0</td><td>▁▁▂▃▄▅▆▇███████▇▇▇▇▆▆▆▆▅▅▄▄▄▃▃▃▂▂▂▂▁▁▁▁▁</td></tr><tr><td>mom_0</td><td>██▇▆▅▄▃▂▁▁▁▁▁▁▁▂▂▂▂▃▃▃▃▄▄▅▅▅▆▆▆▇▇▇▇█████</td></tr><tr><td>eps_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▂▂▂▂▃▃▃▃▃▄▄▄▄▄▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇████</td></tr><tr><td>_timestamp</td><td>▁▁▁▂▂▂▂▃▃▃▃▃▄▄▄▄▄▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇▇▇▇▇████</td></tr><tr><td>_step</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>valid_loss</td><td>███▇▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>accuracy</td><td>▁▂▄▅▇███████████████████████████████████</td></tr></table><br/>"
+       "<tr><td>epoch</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>train_loss</td><td>███▇▆▅▄▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>raw_loss</td><td>███▇▅▄▃▂▁▁▁▁▁▂▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁</td></tr><tr><td>wd_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>sqr_mom_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>lr_0</td><td>▁▁▂▃▄▅▆▇███████▇▇▇▇▆▆▆▆▅▅▄▄▄▃▃▃▂▂▂▂▁▁▁▁▁</td></tr><tr><td>mom_0</td><td>██▇▆▅▄▃▂▁▁▁▁▁▁▁▂▂▂▂▃▃▃▃▄▄▅▅▅▆▆▆▇▇▇▇█████</td></tr><tr><td>eps_0</td><td>▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▂▂▂▂▃▃▃▃▃▄▄▄▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▇▇▇▇▇▇████</td></tr><tr><td>_timestamp</td><td>▁▁▁▂▂▂▂▃▃▃▃▃▄▄▄▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▇▇▇▇▇▇████</td></tr><tr><td>_step</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>valid_loss</td><td>███▇▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>roc_auc_score</td><td>▂▇▆█▅▄▁▆▄█▇██▆██████████████████████████</td></tr><tr><td>accuracy</td><td>▁▃▅▆████████████████████████████████████</td></tr></table><br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -744,7 +794,7 @@
     {
      "data": {
       "text/html": [
-       "Synced 6 W&B file(s), 51 media file(s), 21 artifact file(s) and 1 other file(s)"
+       "Synced 6 W&B file(s), 51 media file(s), 18 artifact file(s) and 1 other file(s)"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -757,7 +807,7 @@
      "data": {
       "text/html": [
        "\n",
-       "                    <br/>Synced <strong style=\"color:#cdcd00\">modelA training</strong>: <a href=\"https://wandb.ai/manikya/transfertab/runs/2679zttn\" target=\"_blank\">https://wandb.ai/manikya/transfertab/runs/2679zttn</a><br/>\n",
+       "                    <br/>Synced <strong style=\"color:#cdcd00\">modelA training</strong>: <a href=\"https://wandb.ai/transfertab/Experiments/runs/1siad487\" target=\"_blank\">https://wandb.ai/transfertab/Experiments/runs/1siad487</a><br/>\n",
        "                "
       ],
       "text/plain": [
@@ -774,7 +824,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 31,
+   "execution_count": 20,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -784,84 +834,184 @@
     "                   cont_names = contcols,\n",
     "                   y_names=target,\n",
     "                   splits=splitsB)\n",
-    "dlsB = toB.dataloaders(bs=256)"
+    "dlsB = toB.dataloaders(bs=512)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 32,
+   "execution_count": 60,
    "metadata": {},
    "outputs": [],
    "source": [
-    "learnB = tabular_learner(dlsB, metrics=accuracy, emb_szs={'default':4, 'month':12})"
+    "rocaucbinB = RocAucBinary()\n",
+    "learnB = tabular_learner(dlsB, metrics=[rocaucbinB, accuracy], emb_szs={'month':6})"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 36,
+   "execution_count": 61,
    "metadata": {},
    "outputs": [],
    "source": [
     "# catdict = getcatdict(df, catcols)\n",
-    "metadict = {}\n",
-    "for (cat, classes) in catdict.items():\n",
-    "\tmetadict[cat] = {'mapped_cat': cat, 'classes_info': {clas: clas for clas in classes}}\n",
-    "with open('bank_meta.json', 'w') as fp:\n",
-    "\tjson.dump(metadict, fp)"
+    "# metadict = {}\n",
+    "# for (cat, classes) in catdict.items():\n",
+    "# \tmetadict[cat] = {'mapped_cat': cat, 'classes_info': {clas: clas for clas in classes}}\n",
+    "# with open('bank_meta.json', 'w') as fp:\n",
+    "# \tjson.dump(metadict, fp)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 50,
+   "execution_count": 62,
    "metadata": {},
    "outputs": [],
    "source": [
-    "metadict={\"job\": {\"mapped_cat\": \"job\", \"classes_info\": {\"#na#\": \"#na#\", \"admin.\": \"admin.\", \"blue-collar\": \"blue-collar\", \"entrepreneur\": \"entrepreneur\", \"housemaid\": \"housemaid\", \"management\": \"management\", \"retired\": \"retired\", \"self-employed\": \"self-employed\", \"services\": \"services\", \"student\": \"student\", \"technician\": \"technician\", \"unemployed\": \"unemployed\", \"unknown\": \"unknown\"}}, \"marital\": {\"mapped_cat\": \"marital\", \"classes_info\": {\"#na#\": \"#na#\", \"divorced\": \"divorced\", \"married\": \"married\", \"single\": \"single\", \"unknown\": \"unknown\"}}, \"education\": {\"mapped_cat\": \"education\", \"classes_info\": {\"#na#\": \"#na#\", \"basic.4y\": \"basic.4y\", \"basic.6y\": \"basic.6y\", \"basic.9y\": \"basic.9y\", \"high.school\": \"high.school\", \"illiterate\": \"illiterate\", \"professional.course\": \"professional.course\", \"university.degree\": \"university.degree\", \"unknown\": \"unknown\"}}, \"default\": {\"mapped_cat\": \"default\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\"}}, \"housing\": {\"mapped_cat\": \"housing\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\", \"yes\": \"yes\"}}, \"loan\": {\"mapped_cat\": \"loan\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\", \"yes\": \"yes\"}}, \"contact\": {\"mapped_cat\": \"contact\", \"classes_info\": {\"#na#\": \"#na#\", \"cellular\": \"cellular\", \"telephone\": \"telephone\"}}, \"month\": {\"mapped_cat\": \"month\", \"classes_info\": {\"#na#\": \"#na#\", \"apr\": \"apr\", \"aug\": \"aug\", \"dec\": \"dec\", \"jul\": \"jul\", \"jun\": \"jun\", \"mar\": \"mar\", \"may\": \"may\", \"nov\": \"nov\", \"oct\": \"oct\", \"sep\":[]}}, \"day_of_week\": {\"mapped_cat\": \"day_of_week\", \"classes_info\": {\"#na#\": \"#na#\", \"fri\": \"fri\", \"mon\": \"mon\", \"thu\": \"thu\", \"tue\": \"tue\", \"wed\": \"wed\"}}, \"poutcome\": {\"mapped_cat\": \"poutcome\", \"classes_info\": {\"#na#\": \"#na#\", \"failure\": \"failure\", \"nonexistent\": \"nonexistent\", \"success\": \"success\"}}}"
+    "# metadict={\"job\": {\"mapped_cat\": \"job\", \"classes_info\": {\"#na#\": \"#na#\", \"admin.\": \"admin.\", \"blue-collar\": \"blue-collar\", \"entrepreneur\": \"entrepreneur\", \"housemaid\": \"housemaid\", \"management\": \"management\", \"retired\": \"retired\", \"self-employed\": \"self-employed\", \"services\": \"services\", \"student\": \"student\", \"technician\": \"technician\", \"unemployed\": \"unemployed\", \"unknown\": \"unknown\"}}, \"marital\": {\"mapped_cat\": \"marital\", \"classes_info\": {\"#na#\": \"#na#\", \"divorced\": \"divorced\", \"married\": \"married\", \"single\": \"single\", \"unknown\": \"unknown\"}}, \"education\": {\"mapped_cat\": \"education\", \"classes_info\": {\"#na#\": \"#na#\", \"basic.4y\": \"basic.4y\", \"basic.6y\": \"basic.6y\", \"basic.9y\": \"basic.9y\", \"high.school\": \"high.school\", \"illiterate\": \"illiterate\", \"professional.course\": \"professional.course\", \"university.degree\": \"university.degree\", \"unknown\": \"unknown\"}}, \"default\": {\"mapped_cat\": \"default\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\"}}, \"housing\": {\"mapped_cat\": \"housing\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\", \"yes\": \"yes\"}}, \"loan\": {\"mapped_cat\": \"loan\", \"classes_info\": {\"#na#\": \"#na#\", \"no\": \"no\", \"unknown\": \"unknown\", \"yes\": \"yes\"}}, \"contact\": {\"mapped_cat\": \"contact\", \"classes_info\": {\"#na#\": \"#na#\", \"cellular\": \"cellular\", \"telephone\": \"telephone\"}}, \"month\": {\"mapped_cat\": \"month\", \"classes_info\": {\"#na#\": \"#na#\", \"apr\": \"apr\", \"aug\": \"aug\", \"dec\": \"dec\", \"jul\": \"jul\", \"jun\": \"jun\", \"mar\": \"mar\", \"may\": \"may\", \"nov\": \"nov\", \"oct\": \"oct\", \"sep\":[]}}, \"day_of_week\": {\"mapped_cat\": \"day_of_week\", \"classes_info\": {\"#na#\": \"#na#\", \"fri\": \"fri\", \"mon\": \"mon\", \"thu\": \"thu\", \"tue\": \"tue\", \"wed\": \"wed\"}}, \"poutcome\": {\"mapped_cat\": \"poutcome\", \"classes_info\": {\"#na#\": \"#na#\", \"failure\": \"failure\", \"nonexistent\": \"nonexistent\", \"success\": \"success\"}}}"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 46,
+   "execution_count": 63,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "with open('../data/jsons/bank_meta.json', 'r') as fp:\n",
+    "    metadict = json.load(fp) "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 64,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'job': {'mapped_cat': 'job',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'admin.': 'admin.',\n",
+       "   'blue-collar': 'blue-collar',\n",
+       "   'entrepreneur': 'entrepreneur',\n",
+       "   'housemaid': 'housemaid',\n",
+       "   'management': 'management',\n",
+       "   'retired': 'retired',\n",
+       "   'self-employed': 'self-employed',\n",
+       "   'services': 'services',\n",
+       "   'student': 'student',\n",
+       "   'technician': 'technician',\n",
+       "   'unemployed': 'unemployed',\n",
+       "   'unknown': 'unknown'}},\n",
+       " 'marital': {'mapped_cat': 'marital',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'divorced': 'divorced',\n",
+       "   'married': 'married',\n",
+       "   'single': 'single',\n",
+       "   'unknown': 'unknown'}},\n",
+       " 'education': {'mapped_cat': 'education',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'basic.4y': 'basic.4y',\n",
+       "   'basic.6y': 'basic.6y',\n",
+       "   'basic.9y': 'basic.9y',\n",
+       "   'high.school': 'high.school',\n",
+       "   'illiterate': 'illiterate',\n",
+       "   'professional.course': 'professional.course',\n",
+       "   'university.degree': 'university.degree',\n",
+       "   'unknown': 'unknown'}},\n",
+       " 'default': {'mapped_cat': 'default',\n",
+       "  'classes_info': {'#na#': '#na#', 'no': 'no', 'unknown': 'unknown'}},\n",
+       " 'housing': {'mapped_cat': 'housing',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'no': 'no',\n",
+       "   'unknown': 'unknown',\n",
+       "   'yes': 'yes'}},\n",
+       " 'loan': {'mapped_cat': 'loan',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'no': 'no',\n",
+       "   'unknown': 'unknown',\n",
+       "   'yes': 'yes'}},\n",
+       " 'contact': {'mapped_cat': 'contact',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'cellular': 'cellular',\n",
+       "   'telephone': 'telephone'}},\n",
+       " 'month': {'mapped_cat': 'month',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'apr': 'apr',\n",
+       "   'aug': 'aug',\n",
+       "   'dec': 'dec',\n",
+       "   'jul': 'jul',\n",
+       "   'jun': 'jun',\n",
+       "   'mar': 'mar',\n",
+       "   'may': 'may',\n",
+       "   'nov': 'nov',\n",
+       "   'oct': 'oct',\n",
+       "   'sep': []}},\n",
+       " 'day_of_week': {'mapped_cat': 'day_of_week',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'fri': 'fri',\n",
+       "   'mon': 'mon',\n",
+       "   'thu': 'thu',\n",
+       "   'tue': 'tue',\n",
+       "   'wed': 'wed'}},\n",
+       " 'poutcome': {'mapped_cat': 'poutcome',\n",
+       "  'classes_info': {'#na#': '#na#',\n",
+       "   'failure': 'failure',\n",
+       "   'nonexistent': 'nonexistent',\n",
+       "   'success': 'success'}}}"
+      ]
+     },
+     "execution_count": 64,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "metadict"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 65,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "['#na#', 'apr', 'aug', 'dec', 'jul', 'jun', 'mar', 'may', 'nov', 'oct', 'sep']"
+       "['#na#', 'no', 'unknown']"
       ]
      },
-     "execution_count": 46,
+     "execution_count": 65,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "learnB.dls.categorify['month']"
+    "learnB.dls.categorify['default']"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": 66,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "['#na#', 'apr', 'aug', 'dec', 'jul', 'jun', 'mar', 'may', 'nov', 'oct']"
+       "['#na#', 'no', 'unknown', 'yes']"
       ]
      },
-     "execution_count": 47,
+     "execution_count": 66,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "learnA.dls.categorify['month']"
+    "learnA.dls.categorify['default']"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 39,
+   "execution_count": 67,
    "metadata": {},
    "outputs": [
     {
@@ -881,7 +1031,7 @@
        ")"
       ]
      },
-     "execution_count": 39,
+     "execution_count": 67,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -892,14 +1042,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 40,
+   "execution_count": 68,
    "metadata": {},
    "outputs": [
     {
@@ -919,7 +1062,7 @@
        ")"
       ]
      },
-     "execution_count": 40,
+     "execution_count": 68,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -930,7 +1073,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 41,
+   "execution_count": 69,
    "metadata": {},
    "outputs": [
     {
@@ -939,7 +1082,7 @@
        "(#10) ['job','marital','education','default','housing','loan','contact','month','day_of_week','poutcome']"
       ]
      },
-     "execution_count": 41,
+     "execution_count": 69,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -950,54 +1093,34 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 52,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "['job',\n",
-       " 'marital',\n",
-       " 'education',\n",
-       " 'default',\n",
-       " 'housing',\n",
-       " 'loan',\n",
-       " 'contact',\n",
-       " 'month',\n",
-       " 'day_of_week',\n",
-       " 'poutcome']"
-      ]
-     },
-     "execution_count": 52,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "catcols"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 55,
+   "execution_count": 70,
    "metadata": {},
    "outputs": [],
    "source": [
     "transfercats = ['job',\n",
     " 'marital',\n",
     " 'education',\n",
-    "#  'default',\n",
+    " 'default',\n",
     " 'housing',\n",
     " 'loan',\n",
     " 'contact',\n",
-    "#  'month',\n",
+    " 'month',\n",
     " 'day_of_week',\n",
     " 'poutcome']"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 68,
+   "execution_count": 71,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "catdictB = {col:list(learnB.dls.categorify.classes[col]) for col in catcols}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 72,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1011,27 +1134,27 @@
     "    transfercats, \n",
     "    newcatcols=catcols, \n",
     "    oldcatcols=catcols, \n",
-    "    oldcatdict=catdict, \n",
-    "    newcatdict=catdict)"
+    "    oldcatdict=catdictA, \n",
+    "    newcatdict=catdictB)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 69,
+   "execution_count": 73,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "Parameter containing:\n",
-       "tensor([[-0.0062, -0.0045,  0.0040,  0.0023],\n",
-       "        [ 0.0453, -0.0868, -0.0149, -0.1187],\n",
-       "        [-0.0988,  0.0682, -0.0179,  0.0305],\n",
-       "        [ 0.0457, -0.0005,  0.0830,  0.0363],\n",
-       "        [ 0.0554, -0.0514,  0.0081,  0.0404]], requires_grad=True)"
+       "tensor([[-0.0041,  0.0100,  0.0102, -0.0024],\n",
+       "        [ 0.0009,  0.0190,  0.0418,  0.0202],\n",
+       "        [-0.0319,  0.0140, -0.0415, -0.0403],\n",
+       "        [ 0.0654, -0.0346, -0.0149,  0.0547],\n",
+       "        [-0.0699, -0.0018, -0.0980,  0.0875]], requires_grad=True)"
       ]
      },
-     "execution_count": 69,
+     "execution_count": 73,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1042,21 +1165,21 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 70,
+   "execution_count": 74,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "Parameter containing:\n",
-       "tensor([[-0.0062, -0.0045,  0.0040,  0.0023],\n",
-       "        [ 0.0453, -0.0868, -0.0149, -0.1187],\n",
-       "        [-0.0988,  0.0682, -0.0179,  0.0305],\n",
-       "        [ 0.0457, -0.0005,  0.0830,  0.0363],\n",
-       "        [ 0.0554, -0.0514,  0.0081,  0.0404]])"
+       "tensor([[-0.0041,  0.0100,  0.0102, -0.0024],\n",
+       "        [ 0.0009,  0.0190,  0.0418,  0.0202],\n",
+       "        [-0.0319,  0.0140, -0.0415, -0.0403],\n",
+       "        [ 0.0654, -0.0346, -0.0149,  0.0547],\n",
+       "        [-0.0699, -0.0018, -0.0980,  0.0875]], requires_grad=True)"
       ]
      },
-     "execution_count": 70,
+     "execution_count": 74,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1067,17 +1190,18 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 71,
+   "execution_count": 75,
    "metadata": {},
    "outputs": [],
    "source": [
     "dlsC = deepcopy(dlsB)\n",
-    "learnC = tabular_learner(dlsC, metrics=accuracy)"
+    "rocaucbinC = RocAucBinary()\n",
+    "learnC = tabular_learner(dlsC, metrics=[rocaucbinC, accuracy], emb_szs={'month':6})"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 72,
+   "execution_count": 76,
    "metadata": {},
    "outputs": [
     {
@@ -1086,7 +1210,7 @@
        "<All keys matched successfully>"
       ]
      },
-     "execution_count": 72,
+     "execution_count": 76,
      "metadata": {},
      "output_type": "execute_result"
     }
