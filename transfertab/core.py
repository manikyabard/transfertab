# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_transfer.ipynb (unless otherwise specified).

__all__ = []

# Cell
from nbdev.showdoc import *
from .utils import *
import torch
import torch.nn as nn
import json
from functools import partial
from fastcore.foundation import *
from fastcore.dispatch import *

# Cell
@typedispatch
def transferembeds_(
        dest_model: nn.Module,
        src_model: nn.Module,
        /,
        metatransfer,
        transfer_cats,
        *,
        newcatcols,
        oldcatcols,
        oldcatdict,
        newcatdict,
        aggfn = partial(torch.mean, dim=0)):
    '''
        Transfers embeddings from `src_model` to `dest_model`,
        with the help of collections containing various metadata.
    '''
    src_state_dict = L(src_model.state_dict().items())
    dest_state_dict = L(dest_model.state_dict().items())
    for newcat in transfer_cats:
        newidx = newcatcols.index(newcat)
        oldidx = oldcatcols.index(metatransfer[newcat]["mapped_cat"])
        new_ps = torch.zeros(src_state_dict[oldidx][1].shape[1], 0)
        for newclass in newcatdict[newcat]:
            classidxs = L(oldcatdict[oldcatcols[oldidx]]).argwhere(lambda x: x in metatransfer[newcat]["classes_info"][newclass])
            if len(classidxs) == 0:
                classidxs =  list(range(len(oldcatdict[oldcatcols[oldidx]])))
            ps = torch.unsqueeze(aggfn(torch.index_select(src_state_dict[oldidx][1], 0, torch.LongTensor(classidxs))), -1)
            new_ps = torch.cat((new_ps, ps), dim=1)
        print(f"new param size: {new_ps.shape}\nold param size: {dest_model.state_dict()[dest_state_dict[newidx][0]].shape}\n")
        dest_model.state_dict()[dest_state_dict[newidx][0]].copy_(new_ps.T)

# @typedispatch
# def transferembeds_(
#         dest_model: nn.Module,
#         src_embed_json: dict,
#
#         metatransfer,
#         transfer_cats,
#         *,
#         newcatcols,
#         oldcatcols,
#         oldcatdict,
#         newcatdict,
#         aggfn = partial(torch.mean, dim=0)):

# @typedispatch
# def transferembeds_(
#         dest_model: nn.Module,
#         src_embed_json: pathlib.PosixPath,
#         metatransfer,
#         transfer_cats,
#         *,
#         newcatcols,
#         oldcatcols,
#         oldcatdict,
#         newcatdict,
#         aggfn = partial(torch.mean, dim=0)):